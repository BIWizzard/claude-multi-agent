---
import type { Exercise } from '../../types';

interface Props {
  exercise: Exercise;
  progress?: number;
  status?: 'not-started' | 'in-progress' | 'completed';
  showProgress?: boolean;
  className?: string;
}

const {
  exercise,
  progress = 0,
  status = 'not-started',
  showProgress = true,
  className = ''
} = Astro.props;

const getStatusIcon = (status: string) => {
  switch (status) {
    case 'completed':
      return '‚úÖ';
    case 'in-progress':
      return '‚è≥';
    default:
      return '‚óã';
  }
};

const getActionText = (status: string) => {
  switch (status) {
    case 'completed':
      return 'Review Exercise';
    case 'in-progress':
      return 'Continue';
    default:
      return 'Start Exercise';
  }
};

const getDifficultyColor = (difficulty: string) => {
  switch (difficulty.toLowerCase()) {
    case 'beginner':
      return '#38a169'; // green
    case 'intermediate':
      return '#d69e2e'; // yellow
    case 'advanced':
      return '#e53e3e'; // red
    default:
      return '#4a5568'; // gray
  }
};
---

<article class={`exercise-card exercise-card--${status} ${className}`}>
  <header class="exercise-card__header">
    <div class="exercise-card__title-section">
      <div class="exercise-card__status-icon" aria-label={`Status: ${status}`}>
        {getStatusIcon(status)}
      </div>
      <h3 class="exercise-card__title">{exercise.title}</h3>
    </div>

    <div class="exercise-card__meta">
      <span class="exercise-card__duration">{exercise.duration}</span>
      <span
        class="exercise-card__difficulty"
        style={`--difficulty-color: ${getDifficultyColor(exercise.difficulty)}`}
      >
        {exercise.difficulty}
      </span>
    </div>
  </header>

  <div class="exercise-card__content">
    <p class="exercise-card__description">{exercise.description}</p>

    <div class="exercise-card__objectives">
      <h4 class="objectives__title">Learning Objectives:</h4>
      <ul class="objectives__list">
        {exercise.objectives.map((objective) => (
          <li class="objectives__item">{objective}</li>
        ))}
      </ul>
    </div>

    {exercise.prerequisites && exercise.prerequisites.length > 0 && (
      <div class="exercise-card__prerequisites">
        <h4 class="prerequisites__title">Prerequisites:</h4>
        <ul class="prerequisites__list">
          {exercise.prerequisites.map((prerequisite) => (
            <li class="prerequisites__item">{prerequisite}</li>
          ))}
        </ul>
      </div>
    )}
  </div>

  <footer class="exercise-card__footer">
    {showProgress && progress > 0 && (
      <div class="exercise-card__progress">
        <div class="progress-bar">
          <div
            class="progress-bar__fill"
            style={`width: ${progress}%`}
            role="progressbar"
            aria-label={`Exercise progress: ${progress}%`}
            aria-valuenow={progress}
            aria-valuemin="0"
            aria-valuemax="100"
          ></div>
        </div>
        <span class="progress-text">{progress}% complete</span>
      </div>
    )}

    <div class="exercise-card__actions">
      <button
        class="btn btn--primary"
        data-exercise-id={exercise.id}
        data-action="start"
      >
        {getActionText(status)}
      </button>

      {progress > 0 && (
        <button
          class="btn btn--outline btn--small"
          data-exercise-id={exercise.id}
          data-action="reset"
        >
          üîÑ Start Over
        </button>
      )}
    </div>
  </footer>
</article>

<style>
  .exercise-card {
    display: flex;
    flex-direction: column;
    padding: 1.5rem;
    background: var(--bg-primary, #ffffff);
    border: 1px solid var(--border-color, #e2e8f0);
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    height: 100%;
  }

  .exercise-card:hover {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .exercise-card--completed {
    border-color: var(--success-color, #38a169);
    background: var(--success-light, #f0fff4);
  }

  .exercise-card--in-progress {
    border-color: var(--warning-color, #d69e2e);
    background: var(--warning-light, #fffbeb);
  }

  .exercise-card__header {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  .exercise-card__title-section {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
  }

  .exercise-card__status-icon {
    font-size: 1.25rem;
    line-height: 1;
    margin-top: 0.125rem;
  }

  .exercise-card__title {
    flex: 1;
    margin: 0;
    font-size: 1.25rem;
    font-weight: 700;
    line-height: 1.3;
    color: var(--text-primary, #1a202c);
  }

  .exercise-card__meta {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .exercise-card__duration {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.875rem;
    color: var(--text-secondary, #4a5568);
    font-weight: 500;
  }

  .exercise-card__duration::before {
    content: '‚è±Ô∏è';
    font-size: 1rem;
  }

  .exercise-card__difficulty {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.75rem;
    background: var(--difficulty-color);
    color: white;
    font-size: 0.75rem;
    font-weight: 600;
    border-radius: 9999px;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .exercise-card__content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .exercise-card__description {
    margin: 0;
    font-size: 1rem;
    line-height: 1.6;
    color: var(--text-primary, #1a202c);
  }

  .objectives__title,
  .prerequisites__title {
    margin: 0 0 0.5rem 0;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-secondary, #4a5568);
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .objectives__list,
  .prerequisites__list {
    margin: 0;
    padding-left: 1.25rem;
    list-style: none;
  }

  .objectives__item,
  .prerequisites__item {
    position: relative;
    margin-bottom: 0.25rem;
    font-size: 0.875rem;
    line-height: 1.5;
    color: var(--text-primary, #1a202c);
  }

  .objectives__item::before {
    content: '‚Ä¢';
    color: var(--primary-color, #3182ce);
    font-weight: bold;
    position: absolute;
    left: -1rem;
  }

  .prerequisites__item::before {
    content: '‚Üí';
    color: var(--warning-color, #d69e2e);
    font-weight: bold;
    position: absolute;
    left: -1rem;
  }

  .exercise-card__footer {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border-light, #f7fafc);
  }

  .exercise-card__progress {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .progress-bar {
    width: 100%;
    height: 6px;
    background: var(--bg-secondary, #e2e8f0);
    border-radius: 3px;
    overflow: hidden;
  }

  .progress-bar__fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color, #3182ce), var(--primary-hover, #2c5282));
    border-radius: 3px;
    transition: width 0.3s ease;
  }

  .progress-text {
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--text-secondary, #4a5568);
    text-align: center;
  }

  .exercise-card__actions {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    font-size: 0.875rem;
    font-weight: 600;
    line-height: 1;
    border: 1px solid transparent;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    white-space: nowrap;
  }

  .btn--primary {
    background: var(--primary-color, #3182ce);
    color: white;
    flex: 1;
  }

  .btn--primary:hover {
    background: var(--primary-hover, #2c5282);
    transform: translateY(-1px);
  }

  .btn--outline {
    background: transparent;
    border-color: var(--border-color, #e2e8f0);
    color: var(--text-primary, #1a202c);
  }

  .btn--outline:hover {
    background: var(--bg-hover, #f7fafc);
    border-color: var(--border-hover, #cbd5e0);
  }

  .btn--small {
    padding: 0.5rem 1rem;
    font-size: 0.75rem;
  }

  /* Responsive design */
  @media (max-width: 640px) {
    .exercise-card {
      padding: 1rem;
    }

    .exercise-card__meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .exercise-card__actions {
      flex-direction: column;
      align-items: stretch;
    }

    .btn {
      justify-content: center;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .exercise-card {
      --bg-primary: #2d3748;
      --border-color: #4a5568;
      --text-primary: #f7fafc;
      --text-secondary: #a0aec0;
      --border-light: #4a5568;
      --bg-secondary: #4a5568;
    }

    .exercise-card--completed {
      --success-light: #1a2e1a;
    }

    .exercise-card--in-progress {
      --warning-light: #2d2a1a;
    }

    .btn--outline {
      --bg-hover: #4a5568;
      --border-hover: #718096;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .exercise-card {
      border-width: 2px;
    }

    .btn {
      border-width: 2px;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .exercise-card,
    .btn,
    .progress-bar__fill {
      transition: none;
    }

    .exercise-card:hover,
    .btn:hover {
      transform: none;
    }
  }
</style>

<script>
  // Add event listeners for exercise actions
  document.addEventListener('DOMContentLoaded', () => {
    const exerciseCards = document.querySelectorAll('.exercise-card');

    exerciseCards.forEach(card => {
      const startButton = card.querySelector('[data-action="start"]');
      const resetButton = card.querySelector('[data-action="reset"]');

      if (startButton) {
        startButton.addEventListener('click', (e) => {
          const exerciseId = (e.target as HTMLElement).dataset.exerciseId;
          if (exerciseId) {
            // Dispatch custom event for parent component to handle
            document.dispatchEvent(new CustomEvent('exercise:start', {
              detail: { exerciseId }
            }));
          }
        });
      }

      if (resetButton) {
        resetButton.addEventListener('click', (e) => {
          const exerciseId = (e.target as HTMLElement).dataset.exerciseId;
          if (exerciseId && confirm('Are you sure you want to start this exercise over?')) {
            // Dispatch custom event for parent component to handle
            document.dispatchEvent(new CustomEvent('exercise:reset', {
              detail: { exerciseId }
            }));
          }
        });
      }
    });
  });
</script>