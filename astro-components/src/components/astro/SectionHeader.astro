---
import type { SectionHeaderProps } from '../../types';

interface Props extends SectionHeaderProps {
  className?: string;
}

const {
  title,
  type,
  difficulty,
  estimatedTime,
  currentStep,
  totalSteps,
  className = ''
} = Astro.props;

const getTypeIcon = (type: string) => {
  switch (type) {
    case 'reading':
      return 'üìñ';
    case 'action':
      return '‚ö°';
    case 'reflection':
      return 'ü§î';
    default:
      return 'üìù';
  }
};

const getTypeLabel = (type: string) => {
  switch (type) {
    case 'reading':
      return 'Reading';
    case 'action':
      return 'Hands-on';
    case 'reflection':
      return 'Reflection';
    default:
      return 'Section';
  }
};

const getDifficultyColor = (difficulty?: string) => {
  switch (difficulty?.toLowerCase()) {
    case 'beginner':
      return '#38a169'; // green
    case 'intermediate':
      return '#d69e2e'; // yellow
    case 'advanced':
      return '#e53e3e'; // red
    default:
      return '#4a5568'; // gray
  }
};
---

<header class={`section-header ${className}`}>
  <div class="section-header__main">
    <div class="section-header__type">
      <span class="type-icon" aria-hidden="true">{getTypeIcon(type)}</span>
      <span class="type-label">{getTypeLabel(type)}</span>
    </div>

    <h1 class="section-header__title">{title}</h1>

    <div class="section-header__meta">
      {estimatedTime && (
        <div class="meta-item meta-item--time">
          <span class="meta-icon" aria-hidden="true">‚è±Ô∏è</span>
          <span class="meta-text">{estimatedTime}</span>
        </div>
      )}

      {difficulty && (
        <div
          class="meta-item meta-item--difficulty"
          style={`--difficulty-color: ${getDifficultyColor(difficulty)}`}
        >
          <span class="meta-text">{difficulty}</span>
        </div>
      )}

      {currentStep !== undefined && totalSteps !== undefined && (
        <div class="meta-item meta-item--progress">
          <span class="meta-text">
            Step {currentStep} of {totalSteps}
          </span>
          <div class="step-progress">
            <div
              class="step-progress__fill"
              style={`width: ${(currentStep / totalSteps) * 100}%`}
              role="progressbar"
              aria-label={`Step ${currentStep} of ${totalSteps}`}
              aria-valuenow={currentStep}
              aria-valuemin="1"
              aria-valuemax={totalSteps}
            ></div>
          </div>
        </div>
      )}
    </div>
  </div>

  {(currentStep !== undefined && totalSteps !== undefined && totalSteps > 1) && (
    <div class="section-header__steps">
      <div class="step-indicators">
        {Array.from({ length: totalSteps }, (_, i) => i + 1).map((step) => (
          <div
            class={`step-indicator ${step <= currentStep ? 'step-indicator--completed' : ''} ${step === currentStep ? 'step-indicator--current' : ''}`}
            aria-label={`Step ${step}${step <= currentStep ? ' completed' : ''}${step === currentStep ? ' current' : ''}`}
          >
            {step <= currentStep ? (
              step === currentStep ? (
                <span class="step-number">{step}</span>
              ) : (
                <span class="step-check">‚úì</span>
              )
            ) : (
              <span class="step-number">{step}</span>
            )}
          </div>
        ))}
      </div>
    </div>
  )}
</header>

<style>
  .section-header {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 2rem 0;
    margin-bottom: 2rem;
    border-bottom: 1px solid var(--border-color, #e2e8f0);
  }

  .section-header__main {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .section-header__type {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-secondary, #4a5568);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .type-icon {
    font-size: 1.2rem;
    line-height: 1;
  }

  .type-label {
    line-height: 1;
  }

  .section-header__title {
    margin: 0;
    font-size: 2.5rem;
    font-weight: 800;
    line-height: 1.2;
    color: var(--text-primary, #1a202c);
    letter-spacing: -0.025em;
  }

  .section-header__meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: center;
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .meta-item--time {
    color: var(--text-secondary, #4a5568);
  }

  .meta-item--difficulty {
    background: var(--difficulty-color);
    color: white;
    padding: 0.375rem 0.75rem;
    border-radius: 9999px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    font-size: 0.75rem;
  }

  .meta-item--progress {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.25rem;
    color: var(--text-secondary, #4a5568);
  }

  .meta-icon {
    font-size: 1rem;
    line-height: 1;
  }

  .meta-text {
    line-height: 1;
  }

  .step-progress {
    width: 80px;
    height: 4px;
    background: var(--bg-secondary, #e2e8f0);
    border-radius: 2px;
    overflow: hidden;
  }

  .step-progress__fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color, #3182ce), var(--primary-hover, #2c5282));
    border-radius: 2px;
    transition: width 0.3s ease;
  }

  .section-header__steps {
    display: flex;
    justify-content: center;
  }

  .step-indicators {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .step-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border: 2px solid var(--border-color, #e2e8f0);
    border-radius: 50%;
    background: var(--bg-primary, #ffffff);
    color: var(--text-secondary, #4a5568);
    font-weight: 600;
    font-size: 0.875rem;
    transition: all 0.3s ease;
  }

  .step-indicator--completed {
    border-color: var(--success-color, #38a169);
    background: var(--success-color, #38a169);
    color: white;
  }

  .step-indicator--current {
    border-color: var(--primary-color, #3182ce);
    background: var(--primary-color, #3182ce);
    color: white;
    box-shadow: 0 0 0 3px var(--primary-light, #ebf8ff);
  }

  .step-number,
  .step-check {
    line-height: 1;
  }

  .step-check {
    font-size: 1rem;
    font-weight: 700;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .section-header {
      padding: 1.5rem 0;
      gap: 1rem;
    }

    .section-header__title {
      font-size: 2rem;
    }

    .section-header__meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .step-indicators {
      gap: 0.5rem;
    }

    .step-indicator {
      width: 2rem;
      height: 2rem;
      font-size: 0.75rem;
    }
  }

  @media (max-width: 480px) {
    .section-header__title {
      font-size: 1.75rem;
    }

    .meta-item--progress {
      width: 100%;
    }

    .step-progress {
      width: 100%;
    }

    .step-indicators {
      flex-wrap: wrap;
      justify-content: center;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .section-header {
      --border-color: #4a5568;
      --text-primary: #f7fafc;
      --text-secondary: #a0aec0;
      --bg-primary: #2d3748;
      --bg-secondary: #4a5568;
    }

    .step-indicator {
      --border-color: #4a5568;
      --bg-primary: #2d3748;
      --text-secondary: #a0aec0;
    }

    .step-indicator--current {
      --primary-light: #2d3748;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .step-indicator {
      border-width: 3px;
    }

    .meta-item--difficulty {
      border: 2px solid currentColor;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .step-progress__fill,
    .step-indicator {
      transition: none;
    }
  }

  /* Print styles */
  @media print {
    .section-header {
      border-bottom: 2px solid #000;
      margin-bottom: 1rem;
    }

    .section-header__title {
      color: #000;
    }

    .step-indicators {
      display: none;
    }
  }
</style>