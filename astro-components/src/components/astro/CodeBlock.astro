---
import type { CodeBlockProps } from '../../types';

interface Props extends CodeBlockProps {
  slot?: string;
}

const {
  code,
  language = 'text',
  title,
  showCopyButton = true,
  copyText,
  className = ''
} = Astro.props;

// Escape HTML in code content
const escapeHtml = (text: string) => {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
};

const escapedCode = escapeHtml(code);
const textToCopy = copyText || code;

// Language-specific syntax highlighting classes
const getLanguageClass = (lang: string) => {
  const langMap: { [key: string]: string } = {
    javascript: 'language-javascript',
    typescript: 'language-typescript',
    jsx: 'language-jsx',
    tsx: 'language-tsx',
    python: 'language-python',
    bash: 'language-bash',
    shell: 'language-bash',
    json: 'language-json',
    yaml: 'language-yaml',
    markdown: 'language-markdown',
    html: 'language-html',
    css: 'language-css',
    sql: 'language-sql',
    text: 'language-text'
  };

  return langMap[lang.toLowerCase()] || 'language-text';
};

const languageClass = getLanguageClass(language);

// Generate unique IDs for accessibility
const codeId = `code-${Math.random().toString(36).substr(2, 9)}`;
const copyId = `copy-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`code-block ${className}`}>
  {title && (
    <div class="code-block__header">
      <h4 class="code-block__title">{title}</h4>
      <div class="code-block__meta">
        <span class="code-block__language">{language}</span>
        {showCopyButton && (
          <button
            id={copyId}
            class="code-block__copy-btn"
            data-copy-text={textToCopy}
            aria-label={`Copy ${title || language} code to clipboard`}
            title="Copy to clipboard"
          >
            <span class="copy-btn__icon" aria-hidden="true">📋</span>
            <span class="copy-btn__text">Copy</span>
          </button>
        )}
      </div>
    </div>
  )}

  <div class="code-block__container">
    <pre class={`code-block__pre ${languageClass}`} tabindex="0"><code
      id={codeId}
      class={`code-block__code ${languageClass}`}
      set:html={escapedCode}
    /></pre>

    {!title && showCopyButton && (
      <button
        id={copyId}
        class="code-block__copy-btn code-block__copy-btn--floating"
        data-copy-text={textToCopy}
        aria-label={`Copy ${language} code to clipboard`}
        title="Copy to clipboard"
      >
        <span class="copy-btn__icon" aria-hidden="true">📋</span>
        <span class="copy-btn__text sr-only">Copy</span>
      </button>
    )}
  </div>

  <div class="code-block__footer">
    <div class="code-block__info">
      <span class="info-item">
        <span class="info-icon" aria-hidden="true">📄</span>
        <span class="info-text">{code.split('\n').length} lines</span>
      </span>
      <span class="info-item">
        <span class="info-icon" aria-hidden="true">🔤</span>
        <span class="info-text">{code.length} characters</span>
      </span>
    </div>
  </div>
</div>

<style>
  .code-block {
    display: flex;
    flex-direction: column;
    margin: 1.5rem 0;
    border: 1px solid var(--border-color, #e2e8f0);
    border-radius: 0.75rem;
    background: var(--bg-code, #f8fafc);
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .code-block__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    background: var(--bg-header, #f1f5f9);
    border-bottom: 1px solid var(--border-color, #e2e8f0);
  }

  .code-block__title {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary, #1a202c);
    line-height: 1;
  }

  .code-block__meta {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .code-block__language {
    padding: 0.25rem 0.75rem;
    background: var(--primary-color, #3182ce);
    color: white;
    font-size: 0.75rem;
    font-weight: 600;
    border-radius: 9999px;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .code-block__container {
    position: relative;
    flex: 1;
  }

  .code-block__pre {
    margin: 0;
    padding: 1.5rem;
    background: var(--bg-code, #f8fafc);
    color: var(--text-code, #2d3748);
    font-family: 'Fira Code', 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Consolas', monospace;
    font-size: 0.875rem;
    line-height: 1.6;
    overflow-x: auto;
    white-space: pre;
    -webkit-overflow-scrolling: touch;
  }

  .code-block__pre:focus {
    outline: 2px solid var(--focus-color, #3182ce);
    outline-offset: -2px;
  }

  .code-block__code {
    display: block;
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    color: inherit;
    background: none;
    border: none;
    padding: 0;
  }

  .code-block__copy-btn {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.5rem 1rem;
    background: var(--bg-primary, #ffffff);
    border: 1px solid var(--border-color, #e2e8f0);
    border-radius: 0.375rem;
    color: var(--text-primary, #1a202c);
    font-size: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .code-block__copy-btn:hover {
    background: var(--bg-hover, #f7fafc);
    border-color: var(--border-hover, #cbd5e0);
    transform: translateY(-1px);
  }

  .code-block__copy-btn:active {
    transform: translateY(0);
  }

  .code-block__copy-btn:focus {
    outline: 2px solid var(--focus-color, #3182ce);
    outline-offset: 2px;
  }

  .code-block__copy-btn--floating {
    position: absolute;
    top: 1rem;
    right: 1rem;
    padding: 0.5rem;
    border-radius: 0.5rem;
    background: var(--bg-primary, #ffffff);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    z-index: 1;
  }

  .code-block__copy-btn--floating .copy-btn__text {
    display: none;
  }

  .code-block__copy-btn--success {
    background: var(--success-color, #38a169);
    border-color: var(--success-color, #38a169);
    color: white;
  }

  .code-block__copy-btn--error {
    background: var(--error-color, #e53e3e);
    border-color: var(--error-color, #e53e3e);
    color: white;
  }

  .copy-btn__icon {
    font-size: 1rem;
    line-height: 1;
  }

  .copy-btn__text {
    line-height: 1;
  }

  .code-block__footer {
    padding: 0.75rem 1.5rem;
    background: var(--bg-footer, #f8fafc);
    border-top: 1px solid var(--border-light, #f1f5f9);
  }

  .code-block__info {
    display: flex;
    gap: 1.5rem;
    align-items: center;
  }

  .info-item {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.75rem;
    color: var(--text-secondary, #4a5568);
  }

  .info-icon {
    font-size: 0.875rem;
    line-height: 1;
  }

  .info-text {
    line-height: 1;
    font-weight: 500;
  }

  /* Language-specific syntax highlighting */
  .language-javascript,
  .language-typescript,
  .language-jsx,
  .language-tsx {
    color: var(--color-js, #f7df1e);
  }

  .language-python {
    color: var(--color-python, #3776ab);
  }

  .language-bash,
  .language-shell {
    color: var(--color-bash, #4eaa25);
  }

  .language-json {
    color: var(--color-json, #292929);
  }

  /* Screen reader only class */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Responsive design */
  @media (max-width: 640px) {
    .code-block__header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
      padding: 1rem;
    }

    .code-block__meta {
      width: 100%;
      justify-content: space-between;
    }

    .code-block__pre {
      padding: 1rem;
      font-size: 0.75rem;
    }

    .code-block__copy-btn--floating {
      top: 0.5rem;
      right: 0.5rem;
      padding: 0.375rem;
    }

    .code-block__footer {
      padding: 0.5rem 1rem;
    }

    .code-block__info {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .code-block {
      --bg-code: #1a202c;
      --bg-header: #2d3748;
      --bg-footer: #1a202c;
      --text-code: #e2e8f0;
      --text-primary: #f7fafc;
      --text-secondary: #a0aec0;
      --border-color: #4a5568;
      --border-light: #2d3748;
      --bg-primary: #2d3748;
    }

    .code-block__copy-btn:hover {
      --bg-hover: #4a5568;
      --border-hover: #718096;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .code-block {
      border-width: 2px;
    }

    .code-block__copy-btn {
      border-width: 2px;
    }

    .code-block__pre:focus {
      outline-width: 3px;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .code-block__copy-btn {
      transition: none;
    }

    .code-block__copy-btn:hover {
      transform: none;
    }
  }

  /* Print styles */
  @media print {
    .code-block {
      break-inside: avoid;
      box-shadow: none;
      border: 2px solid #000;
    }

    .code-block__copy-btn {
      display: none;
    }

    .code-block__pre {
      background: #fff !important;
      color: #000 !important;
    }
  }
</style>

<script>
  // Copy functionality
  document.addEventListener('DOMContentLoaded', () => {
    const copyButtons = document.querySelectorAll('.code-block__copy-btn');

    copyButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        const btn = e.currentTarget as HTMLButtonElement;
        const textToCopy = btn.dataset.copyText || '';
        const iconSpan = btn.querySelector('.copy-btn__icon');
        const textSpan = btn.querySelector('.copy-btn__text');

        if (!textToCopy) return;

        try {
          await navigator.clipboard.writeText(textToCopy);

          // Success feedback
          btn.classList.add('code-block__copy-btn--success');
          if (iconSpan) iconSpan.textContent = '✅';
          if (textSpan) textSpan.textContent = 'Copied!';

          // Reset after 2 seconds
          setTimeout(() => {
            btn.classList.remove('code-block__copy-btn--success');
            if (iconSpan) iconSpan.textContent = '📋';
            if (textSpan) textSpan.textContent = 'Copy';
          }, 2000);

        } catch (err) {
          // Fallback for older browsers
          try {
            const textArea = document.createElement('textarea');
            textArea.value = textToCopy;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);

            // Success feedback
            btn.classList.add('code-block__copy-btn--success');
            if (iconSpan) iconSpan.textContent = '✅';
            if (textSpan) textSpan.textContent = 'Copied!';

            setTimeout(() => {
              btn.classList.remove('code-block__copy-btn--success');
              if (iconSpan) iconSpan.textContent = '📋';
              if (textSpan) textSpan.textContent = 'Copy';
            }, 2000);

          } catch (fallbackErr) {
            // Error feedback
            btn.classList.add('code-block__copy-btn--error');
            if (iconSpan) iconSpan.textContent = '⚠️';
            if (textSpan) textSpan.textContent = 'Failed';

            setTimeout(() => {
              btn.classList.remove('code-block__copy-btn--error');
              if (iconSpan) iconSpan.textContent = '📋';
              if (textSpan) textSpan.textContent = 'Copy';
            }, 2000);
          }
        }
      });
    });
  });
</script>